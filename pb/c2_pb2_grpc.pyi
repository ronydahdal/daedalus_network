"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import abc
import c2_pb2
import collections.abc
import grpc
import grpc.aio
import typing

_T = typing.TypeVar('_T')

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta):
    ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore
    ...

class C2Stub:
    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    Hello: grpc.UnaryUnaryMultiCallable[
        c2_pb2.HelloReq,
        c2_pb2.HelloRes,
    ]
    """simple hello to check connection"""
    Eradicate: grpc.UnaryUnaryMultiCallable[
        c2_pb2.EradicateReq,
        c2_pb2.EradicateRes,
    ]
    """reset everything to default"""
    PushActions: grpc.UnaryUnaryMultiCallable[
        c2_pb2.PushActionsReq,
        c2_pb2.PushActionsRes,
    ]
    """tells the server to perform the given actions"""
    GetPositions: grpc.UnaryUnaryMultiCallable[
        c2_pb2.GetPositionsReq,
        c2_pb2.GetPositionsRes,
    ]
    """gets the attacker positions since the last time this endpoint was queried"""

class C2AsyncStub:
    Hello: grpc.aio.UnaryUnaryMultiCallable[
        c2_pb2.HelloReq,
        c2_pb2.HelloRes,
    ]
    """simple hello to check connection"""
    Eradicate: grpc.aio.UnaryUnaryMultiCallable[
        c2_pb2.EradicateReq,
        c2_pb2.EradicateRes,
    ]
    """reset everything to default"""
    PushActions: grpc.aio.UnaryUnaryMultiCallable[
        c2_pb2.PushActionsReq,
        c2_pb2.PushActionsRes,
    ]
    """tells the server to perform the given actions"""
    GetPositions: grpc.aio.UnaryUnaryMultiCallable[
        c2_pb2.GetPositionsReq,
        c2_pb2.GetPositionsRes,
    ]
    """gets the attacker positions since the last time this endpoint was queried"""

class C2Servicer(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def Hello(
        self,
        request: c2_pb2.HelloReq,
        context: _ServicerContext,
    ) -> typing.Union[c2_pb2.HelloRes, collections.abc.Awaitable[c2_pb2.HelloRes]]:
        """simple hello to check connection"""
    @abc.abstractmethod
    def Eradicate(
        self,
        request: c2_pb2.EradicateReq,
        context: _ServicerContext,
    ) -> typing.Union[c2_pb2.EradicateRes, collections.abc.Awaitable[c2_pb2.EradicateRes]]:
        """reset everything to default"""
    @abc.abstractmethod
    def PushActions(
        self,
        request: c2_pb2.PushActionsReq,
        context: _ServicerContext,
    ) -> typing.Union[c2_pb2.PushActionsRes, collections.abc.Awaitable[c2_pb2.PushActionsRes]]:
        """tells the server to perform the given actions"""
    @abc.abstractmethod
    def GetPositions(
        self,
        request: c2_pb2.GetPositionsReq,
        context: _ServicerContext,
    ) -> typing.Union[c2_pb2.GetPositionsRes, collections.abc.Awaitable[c2_pb2.GetPositionsRes]]:
        """gets the attacker positions since the last time this endpoint was queried"""

def add_C2Servicer_to_server(servicer: C2Servicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...
